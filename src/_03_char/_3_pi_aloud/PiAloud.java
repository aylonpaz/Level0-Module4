package _03_char._3_pi_aloud;

import java.util.Scanner;

import javax.swing.JOptionPane;

public class PiAloud {
    /***********  SOUND ***************
     * Some computers are unable to play sounds.
     * If you cannot play sound on this computer, set canPlaySounds to false.
     * If you are not sure, ask your teacher
     * *****************/
    boolean canPlaySounds = true;

public static void main(String[] args) {
	

    // 1. Make a main method and make sure your program can run
	pause(1);
    // 2. Make a String variable to hold 20 digits of Pi. You could use http://www.piday.org/million/ to get this.
	String dogerSUCK = "3.141592653589793238462643383279502884197169399375105820974944592307816406286 2089986280"
			+ "34825342117067982148086513282306647093844609550582231725359408128481 117450284102701938521"
			+ ""
			+ ""
			+ ""
			+ ""
			+"105559644622948954930381964428810975665933446128475648233 786783165271201909145648566923460348610454326648213393607260249141273724587006 "
			+ "606315588174881520920962829254091715364367892590360011330530548820466521384146 95194151160943305727036575959195309218611738193261179310"
			+ "5118548074462379962749 567351885752724891227938183011949129833673362440656643086021394946395224737190 70217986094370277053921717"
			+ "6293176752384674818467669405132000568127145263560827 785771342757789609173637178721468440901224953430146549585371050792279689258923 54201995"
			+ "6112129021960864034418159813629774771309960518707211349999998372978049 9510597317"
			+ "32816096318595024459455346908302642522308253344685035261931188171010 003137838752886587533208381420617177669147303598253"
			+ "490428755468731159562863882 353787593751957781857780532171226806613001927876611195909216420198938095257201 0654"
			+ "85863278865936153381827968230301952035301852968995773622599413891249721775 2834791315155748572424541506959508295"
			+ "33116861727855889075098381754637464939319 255060400927701671139009848824012858361603563707660104710181942955596198"
			+ "946767 837449448255379774726847104047534646208046684259069491293313677028989152104752 16205696602405803815019351125"
			+ "3382430035587640247496473263914199272604269922796 782354781636009341721641219924586315030286182974555706749838505494"
			+ "588586926995 690927210797509302955321165344987202755960236480665499119881834797753566369807 42654252786255181841757"
			+ "4672890977772793800081647060016145249192173217214772350 1414419735685481613611573525521334757418494684385233239"
			+ "07394143334547762416862 518983569485562099219222184272550254256887671790494601653466804988627232791786 085"
			+ "784383827967976681454100953883786360950680064225125205117392984896084128488 6269456042419"
			+ "65285022210661186306744278622039194945047123713786960956364371917 28746776465757396241389"
			+ "0865832645995813390478027590099465764078951269468398352 5957098258226205224894077267"
			+ "19478268482601476990902640136394437455305068203496 252451749399651431429809190659250937"
			+ "221696461515709858387410597885959772975498 93016175392846813826868386894277415599185592524"
			+ "5953959431049972524680845987273 64469584865383673622262609912460805124388439045124413654"
			+ "9762780797715691435997 7001296160894416948685558484063534220722258284886481584560285060"
			+ "16842739452267 4676788952521385225499546667278239864565961163548862305774564980355936"
			+ "34568174 3241125150760694794510965960940252288797108931456691368672287489405601015033"
			+ "08 617928680920874760917824938589009714909675985261365549781893129784821682998948 722"
			+ "658804857564014270477555132379641451523746234364542858444795265867821051141 35473573"
			+ "9523113427166102135969536231442952484937187110145765403590279934403742 00731057853906"
			+ "2198387447808478489683321445713868751943506430218453191048481005 37061468067491927819"
			+ "1197939952061419663428754440643745123718192179998391015919 56181467514269123974894090"
			+ "7186494231961567945208095146550225231603881930142093 76213785595663893778708303906979"
			+ "2077346722182562599661501421503068038447734549 20260541466592520149744285073251866600"
			+ "2132434088190710486331734649651453905796 268561005508106658796998163574736384052571459"
			+ "102897064140110971206280439039759 515677157700420337869936007230558763176359421873125"
			+ ""
			+ ""
			+ "24 474095226716630600546971638794317"
			
			+ "119687348468873818665675127929857501636341131 462753049901913564682380432997069577015078933772865803571279091376742080565549 362541";
    // 3. Print out 3 digits of Pi. The first value is "pi.charAt(0)", the second is "pi.charAt(1)"
    // Check the console shows 3.1
	System.out.println(dogerSUCK.charAt(0));
	System.out.println(dogerSUCK.charAt(1));
	System.out.println(dogerSUCK.charAt(2));
    // 4. Print ALL the digits of the Pi String, putting each digit on a new line  (hint: use a loop)
for(int piLoop = 0; piLoop < 11000; piLoop +=1) {
	System.out.println(dogerSUCK.charAt(piLoop));
}
    // 5. Skip this step if your computer cannot play sounds.
    //if (canPlaySounds) {
        // Use the Sound.speak() method to speak each digit of Pi.
        
    //}


    // [CHALLENGE]
    // *6. Get a character from the user using the getInputFromUser() method
    // *7. Compare the users' char to the next digit of Pi
    // *8. If they are correct, print out "correct". If they are not, print "incorrect"


    /********************  Use these methods. DON'T CHANGE THE CODE BELOW  ******************/
}
    private static void pause(int seconds) {
        try {
            Thread.sleep(1000 * seconds);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    static char getInputFromUser() {
        Scanner scanner = new Scanner(System.in);
        return scanner.next().toCharArray()[0];
    }

}


